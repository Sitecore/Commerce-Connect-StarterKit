<!--
// Copyright 2016 Sitecore Corporation A/S
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of the License at
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the
// License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language governing permissions
// and limitations under the License.
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
  <sitecore>
    <inventoryProductBuilder type="Sitecore.Commerce.Multishop.InventoryProductBuilder, Sitecore.Commerce" />
    
    <!--  Commerce ENTITIES
          Contains all the Commerce price entities.
          The configuration can be used to substitute the default entity implementation with extended one.
    -->
    <commerce.Entities>
      <OrderableInformation type="Sitecore.Commerce.Entities.Inventory.OrderableInformation, Sitecore.Commerce" />
      <StockDetailsLevel type="Sitecore.Commerce.Entities.Inventory.StockDetailsLevel, Sitecore.Commerce" />
      <StockInformation type="Sitecore.Commerce.Entities.Inventory.StockInformation, Sitecore.Commerce" />
      <StockLocation type="Sitecore.Commerce.Entities.Inventory.StockLocation, Sitecore.Commerce" />
      <StockStatus type="Sitecore.Commerce.Entities.Inventory.StockStatus, Sitecore.Commerce" />
      <IndexStockInformation type="Sitecore.Commerce.Entities.Inventory.IndexStockInformation, Sitecore.Commerce" />
      <StockInformationUpdate type="Sitecore.Commerce.Entities.Inventory.StockInformationUpdate, Sitecore.Commerce" />
      <StockInformationUpdateLocation type="Sitecore.Commerce.Entities.Inventory.StockInformationUpdateLocation, Sitecore.Commerce" />
      <InventoryProduct type="Sitecore.Commerce.Entities.Inventory.InventoryProduct, Sitecore.Commerce" />
    </commerce.Entities>

    <settings>
      <!--  DEFAULT INTEREST DATE IN DAYS
            The default interest date to be use if no interest date is providered when adding a visitor to the BackInStockNotification eaPlan.
      -->
      <setting name="Inventory.DefaultInterestDateInDays" value="180"/>
    </settings>
    
    <!--  INVENTORY SERVICE PROVIDER
    -->
    <inventoryServiceProvider type="Sitecore.Commerce.Services.Inventory.InventoryServiceProvider, Sitecore.Commerce" singleInstance="true" />

    <!--  INVENTORY AUTOMATION PROVIDER
    -->
    <inventoryAutomationProvider type="Sitecore.Commerce.Automation.MarketingAutomation.InventoryAutomationProvider, Sitecore.Commerce" singleInstance="true" />

    <pipelines>
      <!--  GET STOCK INFORMATION
            Gets the StockInformation objects that match the specified criteria.
            This pipeline is responsible for reading inventory data from a commerce system.
            This pipeline requests inventory stock information from the commerce system and
            then converts the output into the proper Commerce format.
      -->
      <commerce.inventory.getStockInformation>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.GetStockInformation.GetStockInformation, Sitecore.Commerce" />
      </commerce.inventory.getStockInformation>

      <!-- GET STOCK STATUS FOR INDEXING
           Gets the index stock information object that matches the specified criteria.
           This pipeline is responsible for reading inventory data required for indexing from a commerce system.
           This pipeline requests inventory stock status information for indexing from the commerce system and
           then converts the output into the proper Commerce format.
      -->
      <commerce.inventory.stockStatusForIndexing>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.GetStockInformation.StockStatusForIndexing, Sitecore.Commerce" />
      </commerce.inventory.stockStatusForIndexing>

      <!--  GET PRE-ORDERABLE INFORMATION
            Gets the pre-orderable information object that matches the specified criteria.
            This pipeline is responsible for reading pre-orderable information data from a commerce system.
            This pipeline requests product pre-orderable information from the commerce system and
            then converts the output into the proper Commerce format.
      -->
      <commerce.inventory.getPreOrderableInformation>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.GetOrderableInformation.GetPreOrderableInformation, Sitecore.Commerce" />
      </commerce.inventory.getPreOrderableInformation>

      <!--  GET BACK-ORDERABLE INFORMATION
            Gets the pre-orderable information object that matches the specified criteria.
            This pipeline is responsible for reading back-orderable information data from a commerce system.
            This pipeline requests product back-orderable information from the commerce system and
            then converts the output into the proper Commerce format.
      -->
      <commerce.inventory.getBackOrderableInformation>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.GetOrderableInformation.GetBackOrderableInformation, Sitecore.Commerce" />
      </commerce.inventory.getBackOrderableInformation>
      
      <!--  TRIGGER VISITED PRODUCT STOCK STATUS PAGE EVENT
            Triggers the visited product stock status page event.
            This pipeline is responsible for triggering the visited product stock status page event.
      -->
      <commerce.inventory.visitedProductStockStatus>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.VisitedProductStockStatus.TriggerVisitedProductStockStatusPageEvent, Sitecore.Commerce">
          <Name>Visited Product Stock Status</Name>
          <Text>Visited product stock status.</Text>
        </processor>
      </commerce.inventory.visitedProductStockStatus>

      <!--  ADD CART LINES
            This pipeline is responsible for adding a new line to the shopping cart and recording a corresponding page event in DMS.
            This happens when a product is added to the cart.
      -->
      <commerce.carts.addCartLines>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.Common.TriggerAddToCartStockStatusPageEvent, Sitecore.Commerce" patch:after="processor[@type='Sitecore.Commerce.Pipelines.Carts.Common.TriggerCartLinesPageEvent, Sitecore.Commerce']">
          <Name>Added To Cart Stock Status</Name>
          <Text>Added to cart stock status.</Text>
        </processor>
      </commerce.carts.addCartLines>

      <!--  TRIGGER PRODUCTS ARE BACK IN STOCK PAGE EVENT
            This pipeline is responsible for udpating the stock information and triggering the page event Products Back In Stock, so that the visitors which have signed up, can be notified.
      -->
      <commerce.inventory.productsAreBackInStock>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.ProductsAreBackInStock.TriggerProductsAreBackInStockPageEvent, Sitecore.Commerce">
          <Name>Products Are Back In Stock</Name>
          <Text>Products are back in stock.</Text>
        </processor>
      </commerce.inventory.productsAreBackInStock>

      <!--  RUNS VISITOR-SIGNUP-FOR-STOCK-NOTIFICATION PIPELINE AND TRIGGER BACK-IN-STOCK-SUBSCRIPTION PAGE EVENT
            This pipeline is responsible for adding the visitor to the EA plan Back In Stock Notification and triggering the back in stock subscription page event.
            This happens when the visitor sign up for back in stock notifications.
      -->
      <commerce.inventory.visitorSignUpForStockNotification>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.VisitorSignUpForStockNotification.VisitorSignUpForStockNotification, Sitecore.Commerce">
          <param ref="eaPlanProvider" />
          <EngagementPlanName>Products Back In Stock</EngagementPlanName>
          <InitialStateName>Waiting</InitialStateName>
        </processor>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.VisitorSignUpForStockNotification.TriggerBackInStockSubscriptionPageEvent, Sitecore.Commerce">
          <Name>Back In Stock Subscription</Name>
          <Text>Back In Stock Subscription.</Text>
        </processor>
      </commerce.inventory.visitorSignUpForStockNotification>

      <!--  RUNS VISITOR-SIGNUP-FOR-STOCK-NOTIFICATION PIPELINE AND TRIGGER BACK-IN-STOCK-SUBSCRIPTION PAGE EVENT
            This pipeline is responsible for adding the visitor to the EA plan Back In Stock Notification and triggering the back in stock subscription page event.
            This happens when the visitor sign up for back in stock notifications.
      -->
      <commerce.inventory.removeVisitorFromStockNotification>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.RemoveVisitorFromStockNotification.RemoveVisitorFromStockNotification, Sitecore.Commerce">
          <EngagementPlanName>Products Back In Stock</EngagementPlanName>
        </processor>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.RemoveVisitorFromStockNotification.TriggerBackInStockUnsubscriptionPageEvent, Sitecore.Commerce">
          <Name>Back In Stock Unsubscription</Name>
          <Text>Back In Stock Unsubscription.</Text>
        </processor>
      </commerce.inventory.removeVisitorFromStockNotification>

      <!--  GET BACK IN STOCK INFORMATION
            Gets the StockInformationUpdate objects that match the specified criteria.
            This pipeline is responsible for reading back-in-stock data from a commerce system.
            This pipeline requests information from the commerce system about when products will
            be back in stock then convverts the output into the proper Commerce format.
      -->
      <commerce.inventory.getBackInStockInformation>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.GetStockInformation.GetBackInStockInformation, Sitecore.Commerce" />
      </commerce.inventory.getBackInStockInformation>

      <!--  GET STOCK LOCATIONS
            Gets the StockLocation objects that match the specified criteria.
            This pipeline is responsible for reading inventory data from a commerce system.
            This pipeline requests inventory stock locations from the commerce system and
            then converts the output into the proper Commerce format.
      -->
      <commerce.inventory.getStockLocations>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.GetStockLocations.GetStockLocations, Sitecore.Commerce" />
      </commerce.inventory.getStockLocations>

      <commerce.inventory.getProductStockLocations>
        <processor type="Sitecore.Commerce.Pipelines.Inventory.GetProductStockLocations.GetProductStockLocations, Sitecore.Commerce" />
      </commerce.inventory.getProductStockLocations>
      
    </pipelines>
  </sitecore>
</configuration>