<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
  <sitecore>
    <!--  Commerce ENTITIES
          Contains all the Commerce order entities.
          The configuration can be used to substitute the default entity implementation with extended one.
    -->
    <commerce.Entities>
      <OrderHeader type="Sitecore.Commerce.Entities.Orders.OrderHeader, Sitecore.Commerce" />
      <Order type="Sitecore.Commerce.Entities.Orders.Order, Sitecore.Commerce" />
      <OrderAdjustment type="Sitecore.Commerce.Entities.Carts.CartAdjustment, Sitecore.Commerce" />
      <OrderLine type="Sitecore.Commerce.Entities.Carts.CartLine, Sitecore.Commerce" />
      <OrderProduct type="Sitecore.Commerce.Entities.Carts.CartProduct, Sitecore.Commerce" />
      <OrderOption type="Sitecore.Commerce.Entities.Carts.CartOption, Sitecore.Commerce" />
      <OrderParty type="Sitecore.Commerce.Entities.Carts.CartParty, Sitecore.Commerce" />
      <OrderPaymentInfo type="Sitecore.Commerce.Entities.Carts.PaymentInfo, Sitecore.Commerce" />
      <OrderShippingInfo type="Sitecore.Commerce.Entities.Carts.ShippingInfo, Sitecore.Commerce" />
    </commerce.Entities>

    <!-- ORDER SERVICE PROVIDER 
         Defines the object which provides core order services.
         Default implementation simply calls corresponding pipelines.
    -->
    <orderServiceProvider type="Sitecore.Commerce.Services.Orders.OrderServiceProvider, Sitecore.Commerce" singleInstance="true" />

    <pipelines>
      <!--
            SUBMIT VISITOR ORDER
      -->
      <commerce.orders.submitVisitorOrder>
        <!--
          Integration point

          This is where you would add your custom component to save the given cart as an order.

          Setting the Result.Sucess flag will cause for the EA Plan and goal not to trigger.
        -->

        <processor type="Sitecore.Commerce.Pipelines.Orders.Common.AddOrderToEAPlan, Sitecore.Commerce">
          <param ref="eaPlanProvider" />
          <param ref="entityFactory" />
          <EngagementPlanName>New Order Placed</EngagementPlanName>
          <InitialStateName>Initial State</InitialStateName>
        </processor>
        <processor type="Sitecore.Commerce.Pipelines.Orders.Common.TriggerOrderGoal, Sitecore.Commerce">
          <Name>Visitor Order Created</Name>
          <Text>Visitor order has been created.</Text>
        </processor>
        <processor type="Sitecore.Commerce.Pipelines.Orders.TriggerLoyaltyCardPurchasePageEvent, Sitecore.Commerce">
          <Name>Loyalty Card Purchase</Name>
          <Text>Loyalty card purchase.</Text>
        </processor>
        <processor type="Sitecore.Commerce.Pipelines.Orders.TriggerGiftCardPurchasePageEvent, Sitecore.Commerce">
          <Name>Gift Card Purchase</Name>
          <Text>Gift card purchase.</Text>
        </processor>
        <processor type="Sitecore.Commerce.Pipelines.Orders.TriggerOrderedProductStockStatusPageEvent, Sitecore.Commerce">
          <param ref="entityFactory" />
          <Name>Ordered Product Stock Status</Name>
          <Text>Ordered product stock status.</Text>
        </processor>
        <processor type="Sitecore.Commerce.Pipelines.Orders.OrderOutcome, Sitecore.Commerce" />
      </commerce.orders.submitVisitorOrder>

      <commerce.orders.getVisitorOrder>
        <!--
          Integration point

          This is where you would add your custom component to return the specific visitor order.

          Setting the Result.Sucess flag will cause for the page event not to trigger.
        -->

        <processor type="Sitecore.Commerce.Pipelines.Orders.GetVisitorOrder.TriggerVisitorViewedOrderDetailsPageEvent, Sitecore.Commerce">
          <Name>Visitor Viewed Order Details</Name>
          <Text>Visitor has viewed the details of an order.</Text>
        </processor>
      </commerce.orders.getVisitorOrder>

      <commerce.orders.getVisitorOrders>
        <!--
          Integration point

          This is where you would add your custom component to return the visitor order list.

          Setting the Result.Sucess flag will cause for the page event not to trigger.
        -->

        <processor type="Sitecore.Commerce.Pipelines.Orders.GetVisitorOrders.TriggerVisitorViewedOrderHistoryPageEvent, Sitecore.Commerce">
          <Name>Visitor Viewed Order History</Name>
          <Text>Visitor has viewed the order history.</Text>
        </processor>
      </commerce.orders.getVisitorOrders>

      <commerce.orders.visitorCancelOrder>
        <!--
          Integration point

          This is where you would add your custom component to cancel the given order.

          Setting the Result.Sucess flag will cause for the page event not to trigger.
        -->

        <processor type="Sitecore.Commerce.Pipelines.Orders.VisitorCancelOrder.TriggerVisitorCancelOrderPageEvent, Sitecore.Commerce">
          <Name>Visitor Cancel Order</Name>
          <Text>Visitor has canceled an order.</Text>
        </processor>
      </commerce.orders.visitorCancelOrder>

      <commerce.orders.getAvailableCountries>
        <!--
          Integration point

          This is where you would add your custom component to return the available countries.

        -->

        <processor type="Sitecore.Commerce.Pipelines.Orders.GetAvailableCountries, Sitecore.Commerce">
        </processor>
      </commerce.orders.getAvailableCountries>

      <commerce.orders.getAvailableRegions>
        <!--
          Integration point

          This is where you would add your custom component to return the available regions.

        -->

        <processor type="Sitecore.Commerce.Pipelines.Orders.GetAvailableRegions, Sitecore.Commerce">
        </processor>
      </commerce.orders.getAvailableRegions>

      <!--  Order status changed event -->
      <commerce.orders.orderStatusChanged>
        <processor type="Sitecore.Commerce.Pipelines.Orders.OrderStatusChanged.TriggerOrderStatusChangedPageEvent, Sitecore.Commerce">
          <Name>Order status changed</Name>
          <Text>Order status changed.</Text>
        </processor>
      </commerce.orders.orderStatusChanged>      

    </pipelines>

  </sitecore>
</configuration>